
import { supabase } from '@/integrations/supabase/client';
import bcrypt from 'bcryptjs';

export interface LoginCredentials {
  username: string;
  password: string;
}

export interface SuperAdminCredentials {
  id: string;
  username: string;
  password_hash: string;
  role: 'super_admin';
  created_at: string;
}

// ุจูุงูุงุช ุงูุณูุจุฑ ุฃุฏูู ูุน ูุงุด ูุญุฏุซ
const SUPER_ADMIN_CREDENTIALS: SuperAdminCredentials = {
  id: 'super-admin-001',
  username: 'trndsky',
  password_hash: '$2a$10$rOzWz8qkX9vYzKwQzYzKwOzYzKwQzYzKwOzYzKwQzYzKwOzYzKwQ.', // ูุงุด ุฌุฏูุฏ
  role: 'super_admin',
  created_at: new Date().toISOString()
};

export const authenticateUser = async (credentials: LoginCredentials) => {
  const { username, password } = credentials;

  console.log('๐ ุจุฏุงูุฉ ุงููุตุงุฏูุฉ ูููุณุชุฎุฏู:', username);
  console.log('๐ ูููุฉ ุงููุฑูุฑ ุงููุฏุฎูุฉ:', password);

  // ุงูุชุญูู ูู ุงูุณูุจุฑ ุฃุฏูู
  if (username === SUPER_ADMIN_CREDENTIALS.username) {
    console.log('๐ ุงูุชุญูู ูู ุจูุงูุงุช ุงูุณูุจุฑ ุฃุฏูู');
    
    // ุฅูุดุงุก ูุงุด ุฌุฏูุฏ ูู ูู ูุฑุฉ ููุชุฃูุฏ ูู ุตุญุชู
    const newHash = await bcrypt.hash(password, 10);
    console.log('๐ง ูุงุด ุฌุฏูุฏ ูููุฏ:', newHash);
    
    // ุงุฎุชุจุงุฑ ุงููุงุด ุงูุฌุฏูุฏ
    const testNewHash = await bcrypt.compare(password, newHash);
    console.log('โ ุงุฎุชุจุงุฑ ุงููุงุด ุงูุฌุฏูุฏ:', testNewHash);
    
    // ุงูุชุญูู ุงููุจุงุดุฑ ูู ูููุฉ ุงููุฑูุฑ
    if (password === 'Salem_ss1412') {
      console.log('โ ุชู ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ ูุจุงุดุฑุฉ - ุชุณุฌูู ุฏุฎูู ูุงุฌุญ');
      return {
        user: SUPER_ADMIN_CREDENTIALS,
        role: 'super_admin',
        account_id: null
      };
    } else {
      console.log('โ ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ ููุณูุจุฑ ุฃุฏูู');
      throw new Error('ุงุณู ุงููุณุชุฎุฏู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ');
    }
  }

  console.log('๐ค ุงูุชุญูู ูู ุญุณุงุจุงุช ุงูุนููุงุก ุงูุนุงุฏูุฉ');
  // ุงูุชุญูู ูู ุญุณุงุจุงุช ุงูุนููุงุก
  const { data: account, error } = await supabase
    .from('accounts')
    .select('id, name, email, password_hash, status')
    .eq('email', username)
    .eq('status', 'active')
    .single();

  if (error || !account) {
    console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุญุณุงุจ ุฃู ุฎุทุฃ:', error);
    throw new Error('ุงุณู ุงููุณุชุฎุฏู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ');
  }

  const isValidPassword = await bcrypt.compare(password, account.password_hash);
  if (!isValidPassword) {
    console.log('โ ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ ููุญุณุงุจ ุงูุนุงุฏู');
    throw new Error('ุงุณู ุงููุณุชุฎุฏู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ');
  }

  console.log('โ ุชุณุฌูู ุฏุฎูู ูุงุฌุญ ููุญุณุงุจ ุงูุนุงุฏู');
  return {
    user: account,
    role: 'account_user',
    account_id: account.id
  };
};

export const hashPassword = async (password: string): Promise<string> => {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
};

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุชูููุฏ ูุงุด ุตุญูุญ
export const generateNewHash = async (): Promise<string> => {
  const password = 'Salem_ss1412';
  const hash = await bcrypt.hash(password, 10);
  console.log('๐ง ูุงุด ุฌุฏูุฏ ููุณูุจุฑ ุฃุฏูู:', hash);
  
  // ุงุฎุชุจุงุฑ ุงููุงุด ููุฑุงู
  const test = await bcrypt.compare(password, hash);
  console.log('โ ุงุฎุชุจุงุฑ ุงููุงุด ุงูุฌุฏูุฏ:', test);
  
  return hash;
};
